// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 15.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace UserInterfaceTesting
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public partial class UIMap
    {
        
        /// <summary>
        /// RecordedMethod1 - Use 'RecordedMethod1Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod1()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UISoftwareEngineeringCListItem.UINameEdit;
            WinButton uIMinimiseButton = this.UIDebugWindow.UIDebugTitleBar.UIMinimiseButton;
            WpfComboBox uIWheelsCmbBoxComboBox = this.UIMainWindowWindow.UIWheelsCmbBoxComboBox;
            WpfComboBox uIHandlebarsCmbBoxComboBox = this.UIMainWindowWindow.UIHandlebarsCmbBoxComboBox;
            WpfComboBox uISaddleCmbBoxComboBox = this.UIMainWindowWindow.UISaddleCmbBoxComboBox;
            WpfButton uIContinueButton = this.UIMainWindowWindow.UIContinueButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfComboBox uIGearsCmbBoxComboBox = this.UIMainWindowWindow.UIGearsCmbBoxComboBox;
            WpfComboBox uIBrakesCmbBoxComboBox = this.UIMainWindowWindow.UIBrakesCmbBoxComboBox;
            WpfComboBox uIFrameSizeCmbBoxComboBox = this.UIMainWindowWindow.UIFrameSizeCmbBoxComboBox;
            WpfComboBox uIFrameColourCmbBoxComboBox = this.UIMainWindowWindow.UIFrameColourCmbBoxComboBox;
            WpfCheckBox uIUpdateWarrantyCheckBox = this.UIMainWindowWindow.UIUpdateWarrantyCheckBox;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(130, 9));

            // Click 'Minimise' button
            Mouse.Click(uIMinimiseButton, new Point(23, 13));

            // Select 'Highways' in 'wheelsCmbBox' combo box
            uIWheelsCmbBoxComboBox.SelectedItem = this.RecordedMethod1Params.UIWheelsCmbBoxComboBoxSelectedItem;

            // Select 'Bullhorns Bars' in 'handlebarsCmbBox' combo box
            uIHandlebarsCmbBoxComboBox.SelectedItem = this.RecordedMethod1Params.UIHandlebarsCmbBoxComboBoxSelectedItem;

            // Select 'Upright' in 'saddleCmbBox' combo box
            uISaddleCmbBoxComboBox.SelectedItem = this.RecordedMethod1Params.UISaddleCmbBoxComboBoxSelectedItem;

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(355, 12));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(25, 6));

            // Select 'Thumb Shifter' in 'gearsCmbBox' combo box
            uIGearsCmbBoxComboBox.SelectedItem = this.RecordedMethod1Params.UIGearsCmbBoxComboBoxSelectedItem;

            // Select 'V-brakes' in 'brakesCmbBox' combo box
            uIBrakesCmbBoxComboBox.SelectedItem = this.RecordedMethod1Params.UIBrakesCmbBoxComboBoxSelectedItem;

            // Select 'Small' in 'frameSizeCmbBox' combo box
            uIFrameSizeCmbBoxComboBox.SelectedItem = this.RecordedMethod1Params.UIFrameSizeCmbBoxComboBoxSelectedItem;

            // Select 'Red' in 'frameColourCmbBox' combo box
            uIFrameColourCmbBoxComboBox.SelectedItem = this.RecordedMethod1Params.UIFrameColourCmbBoxComboBoxSelectedItem;

            // Select 'Update Warranty' check box
            uIUpdateWarrantyCheckBox.Checked = this.RecordedMethod1Params.UIUpdateWarrantyCheckBoxChecked;

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(192, 2));
        }
        
        /// <summary>
        /// RecordedMethod2 - Use 'RecordedMethod2Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod2()
        {
            #region Variable Declarations
            WpfButton uIAddMoreBikesButton = this.UIFinishedWindowWindow.UIAddMoreBikesButton;
            WpfButton uIContinueButton = this.UIMainWindowWindow.UIContinueButton;
            WinButton uIOKButton = this.UIOKWindow.UIOKButton;
            WpfComboBox uIFrameSizeCmbBoxComboBox = this.UIMainWindowWindow.UIFrameSizeCmbBoxComboBox;
            WpfComboBox uIFrameColourCmbBoxComboBox = this.UIMainWindowWindow.UIFrameColourCmbBoxComboBox;
            WpfWindow uIMainWindowWindow = this.UIMainWindowWindow;
            WpfComboBox uIGearsCmbBoxComboBox = this.UIMainWindowWindow.UIGearsCmbBoxComboBox;
            WpfComboBox uIBrakesCmbBoxComboBox = this.UIMainWindowWindow.UIBrakesCmbBoxComboBox;
            WpfComboBox uIHandlebarsCmbBoxComboBox = this.UIMainWindowWindow.UIHandlebarsCmbBoxComboBox;
            WpfComboBox uISaddleCmbBoxComboBox = this.UIMainWindowWindow.UISaddleCmbBoxComboBox;
            WpfComboBox uIWheelsCmbBoxComboBox = this.UIMainWindowWindow.UIWheelsCmbBoxComboBox;
            #endregion

            // Click 'Add More Bikes' button
            Mouse.Click(uIAddMoreBikesButton, new Point(145, 11));

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(397, 10));

            // Click 'OK' button
            Mouse.Click(uIOKButton, new Point(53, 16));

            // Select 'Small' in 'frameSizeCmbBox' combo box
            uIFrameSizeCmbBoxComboBox.SelectedItem = this.RecordedMethod2Params.UIFrameSizeCmbBoxComboBoxSelectedItem;

            // Select 'Red' in 'frameColourCmbBox' combo box
            uIFrameColourCmbBoxComboBox.SelectedItem = this.RecordedMethod2Params.UIFrameColourCmbBoxComboBoxSelectedItem;

            // Click 'MainWindow' window
            Mouse.Click(uIMainWindowWindow, new Point(269, 178));

            // Select 'Thumb Shifter' in 'gearsCmbBox' combo box
            uIGearsCmbBoxComboBox.SelectedItem = this.RecordedMethod2Params.UIGearsCmbBoxComboBoxSelectedItem;

            // Select 'V-brakes' in 'brakesCmbBox' combo box
            uIBrakesCmbBoxComboBox.SelectedItem = this.RecordedMethod2Params.UIBrakesCmbBoxComboBoxSelectedItem;

            // Select 'Drop Bars' in 'handlebarsCmbBox' combo box
            uIHandlebarsCmbBoxComboBox.SelectedItem = this.RecordedMethod2Params.UIHandlebarsCmbBoxComboBoxSelectedItem;

            // Select 'Forward' in 'saddleCmbBox' combo box
            uISaddleCmbBoxComboBox.SelectedItem = this.RecordedMethod2Params.UISaddleCmbBoxComboBoxSelectedItem;

            // Select 'Highways' in 'wheelsCmbBox' combo box
            uIWheelsCmbBoxComboBox.SelectedItem = this.RecordedMethod2Params.UIWheelsCmbBoxComboBoxSelectedItem;

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(382, 13));
        }
        
        /// <summary>
        /// RecordedMethod3
        /// </summary>
        public void RecordedMethod3()
        {
            #region Variable Declarations
            WpfButton uIFinishButton = this.UIFinishedWindowWindow.UIFinishButton;
            #endregion

            // Click 'Finish' button
            Mouse.Click(uIFinishButton, new Point(130, 4));
        }
        
        /// <summary>
        /// RecordedMethod4
        /// </summary>
        public void RecordedMethod4()
        {
            #region Variable Declarations
            WpfButton uIEnterCustomerDetailsButton = this.UITotalCostWindowWindow.UIEnterCustomerDetailsButton;
            #endregion

            // Click 'Enter Customer Details' button
            Mouse.Click(uIEnterCustomerDetailsButton, new Point(151, 14));
        }
        
        /// <summary>
        /// AssertMethod1 - Use 'AssertMethod1ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WpfText uIItem660Text1 = this.UIFinishedWindowWindow.UIItem665Text.UIItem660Text1;
            #endregion

            // Verify that the 'Name' property of '660' label equals '660'
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UIItem660Text1Name, uIItem660Text1.Name, "Not ok");
        }
        
        /// <summary>
        /// AssertMethod2 - Use 'AssertMethod2ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WpfText uIItem615Text1 = this.UIFinishedWindowWindow.UIItem665Text.UIItem615Text1;
            #endregion

            // Verify that the 'Name' property of '615' label equals '615'
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UIItem615Text1Name, uIItem615Text1.Name, "Not ok");
        }
        
        /// <summary>
        /// AssertMethod3 - Use 'AssertMethod3ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WpfText uIItem1275Text1 = this.UITotalCostWindowWindow.UIItem1360Text.UIItem1275Text1;
            WpfText uIItem88HoursText1 = this.UITotalCostWindowWindow.UIItem88HoursText.UIItem88HoursText1;
            #endregion

            // Verify that the 'Name' property of '1275' label equals '1275'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItem1275Text1Name, uIItem1275Text1.Name, "Not ok");

            // Verify that the 'Name' property of '88 Hours' label equals '88 Hours'
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UIItem88HoursText1Name, uIItem88HoursText1.Name, "Not ok");
        }
        
        /// <summary>
        /// RecordedMethod5 - Use 'RecordedMethod5Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod5()
        {
            #region Variable Declarations
            WinEdit uINameEdit = this.UIDebugWindow.UIItemWindow.UISoftwareEngineeringCListItem.UINameEdit;
            WinButton uIMinimiseButton = this.UIDebugWindow.UIDebugTitleBar.UIMinimiseButton;
            WpfComboBox uIFrameSizeCmbBoxComboBox = this.UIMainWindowWindow.UIFrameSizeCmbBoxComboBox;
            WpfComboBox uIFrameColourCmbBoxComboBox = this.UIMainWindowWindow.UIFrameColourCmbBoxComboBox;
            WpfComboBox uIGearsCmbBoxComboBox = this.UIMainWindowWindow.UIGearsCmbBoxComboBox;
            WpfComboBox uIBrakesCmbBoxComboBox = this.UIMainWindowWindow.UIBrakesCmbBoxComboBox;
            WpfComboBox uIHandlebarsCmbBoxComboBox = this.UIMainWindowWindow.UIHandlebarsCmbBoxComboBox;
            WpfComboBox uISaddleCmbBoxComboBox = this.UIMainWindowWindow.UISaddleCmbBoxComboBox;
            WpfComboBox uIWheelsCmbBoxComboBox = this.UIMainWindowWindow.UIWheelsCmbBoxComboBox;
            WpfCheckBox uIUpdateWarrantyCheckBox = this.UIMainWindowWindow.UIUpdateWarrantyCheckBox;
            WpfButton uIContinueButton = this.UIMainWindowWindow.UIContinueButton;
            #endregion

            // Double-Click 'Name' text box
            Mouse.DoubleClick(uINameEdit, new Point(110, 9));

            // Click 'Minimise' button
            Mouse.Click(uIMinimiseButton, new Point(29, 21));

            // Select 'Small' in 'frameSizeCmbBox' combo box
            uIFrameSizeCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UIFrameSizeCmbBoxComboBoxSelectedItem;

            // Click 'frameColourCmbBox' combo box
            Mouse.Click(uIFrameColourCmbBoxComboBox, new Point(86, 11));

            // Select 'Big' in 'frameSizeCmbBox' combo box
            uIFrameSizeCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UIFrameSizeCmbBoxComboBoxSelectedItem1;

            // Select 'Green' in 'frameColourCmbBox' combo box
            uIFrameColourCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UIFrameColourCmbBoxComboBoxSelectedItem;

            // Select 'Flight Deck Shifter' in 'gearsCmbBox' combo box
            uIGearsCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UIGearsCmbBoxComboBoxSelectedItem;

            // Select 'Caliper Brakes' in 'brakesCmbBox' combo box
            uIBrakesCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UIBrakesCmbBoxComboBoxSelectedItem;

            // Select 'Bullhorns Bars' in 'handlebarsCmbBox' combo box
            uIHandlebarsCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UIHandlebarsCmbBoxComboBoxSelectedItem;

            // Select 'Upright' in 'saddleCmbBox' combo box
            uISaddleCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UISaddleCmbBoxComboBoxSelectedItem;

            // Select 'Highways' in 'wheelsCmbBox' combo box
            uIWheelsCmbBoxComboBox.SelectedItem = this.RecordedMethod5Params.UIWheelsCmbBoxComboBoxSelectedItem;

            // Select 'Update Warranty' check box
            uIUpdateWarrantyCheckBox.Checked = this.RecordedMethod5Params.UIUpdateWarrantyCheckBoxChecked;

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(211, 2));
        }
        
        /// <summary>
        /// AssertMethod4 - Use 'AssertMethod4ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WpfText uIItem750Text1 = this.UIFinishedWindowWindow.UIItem665Text.UIItem750Text1;
            #endregion

            // Verify that the 'Name' property of '750' label equals '750'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIItem750Text1Name, uIItem750Text1.Name, "        [TestMethod]");

            // Verify that the 'Name' property of '750' label equals '750'
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIItem750Text1Name1, uIItem750Text1.Name, "Not ok");
        }
        
        /// <summary>
        /// RecordedMethod6
        /// </summary>
        public void RecordedMethod6()
        {
            #region Variable Declarations
            WpfButton uIFinishButton = this.UIFinishedWindowWindow.UIFinishButton;
            #endregion

            // Click 'Finish' button
            Mouse.Click(uIFinishButton, new Point(130, 6));
        }
        
        /// <summary>
        /// AssertMethod5 - Use 'AssertMethod5ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod5()
        {
            #region Variable Declarations
            WpfText uIItem750Text1 = this.UITotalCostWindowWindow.UIItem1360Text.UIItem750Text1;
            #endregion

            // Verify that the 'Name' property of '750' label equals '750'
            Assert.AreEqual(this.AssertMethod5ExpectedValues.UIItem750Text1Name, uIItem750Text1.Name, "not ok");
        }
        
        /// <summary>
        /// AssertMethod6 - Use 'AssertMethod6ExpectedValues' to pass parameters into this method.
        /// </summary>
        public void AssertMethod6()
        {
            #region Variable Declarations
            WpfText uIItem32HoursText1 = this.UITotalCostWindowWindow.UIItem88HoursText.UIItem32HoursText1;
            #endregion

            // Verify that the 'Name' property of '32 Hours' label equals '32 Hours'
            Assert.AreEqual(this.AssertMethod6ExpectedValues.UIItem32HoursText1Name, uIItem32HoursText1.Name, "not ok");
        }
        
        /// <summary>
        /// RecordedMethod7 - Use 'RecordedMethod7Params' to pass parameters into this method.
        /// </summary>
        public void RecordedMethod7()
        {
            #region Variable Declarations
            WpfButton uICancelOrderButton = this.UITotalCostWindowWindow.UICancelOrderButton;
            WpfComboBox uIFrameSizeCmbBoxComboBox = this.UIMainWindowWindow.UIFrameSizeCmbBoxComboBox;
            WpfComboBox uIFrameColourCmbBoxComboBox = this.UIMainWindowWindow.UIFrameColourCmbBoxComboBox;
            WpfComboBox uIGearsCmbBoxComboBox = this.UIMainWindowWindow.UIGearsCmbBoxComboBox;
            WpfComboBox uIBrakesCmbBoxComboBox = this.UIMainWindowWindow.UIBrakesCmbBoxComboBox;
            WpfComboBox uISaddleCmbBoxComboBox = this.UIMainWindowWindow.UISaddleCmbBoxComboBox;
            WpfComboBox uIHandlebarsCmbBoxComboBox = this.UIMainWindowWindow.UIHandlebarsCmbBoxComboBox;
            WpfComboBox uIWheelsCmbBoxComboBox = this.UIMainWindowWindow.UIWheelsCmbBoxComboBox;
            WpfButton uIContinueButton = this.UIMainWindowWindow.UIContinueButton;
            WpfButton uIFinishButton = this.UIFinishedWindowWindow.UIFinishButton;
            WpfButton uIEnterCustomerDetailsButton = this.UITotalCostWindowWindow.UIEnterCustomerDetailsButton;
            #endregion

            // Click 'Cancel Order' button
            Mouse.Click(uICancelOrderButton, new Point(203, 16));

            // Select 'Small' in 'frameSizeCmbBox' combo box
            uIFrameSizeCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UIFrameSizeCmbBoxComboBoxSelectedItem;

            // Click 'frameColourCmbBox' combo box
            Mouse.Click(uIFrameColourCmbBoxComboBox, new Point(106, 15));

            // Select 'Medium' in 'frameSizeCmbBox' combo box
            uIFrameSizeCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UIFrameSizeCmbBoxComboBoxSelectedItem1;

            // Select 'Black' in 'frameColourCmbBox' combo box
            uIFrameColourCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UIFrameColourCmbBoxComboBoxSelectedItem;

            // Select 'Thumb Shifter' in 'gearsCmbBox' combo box
            uIGearsCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UIGearsCmbBoxComboBoxSelectedItem;

            // Select 'V-brakes' in 'brakesCmbBox' combo box
            uIBrakesCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UIBrakesCmbBoxComboBoxSelectedItem;

            // Select 'Forward' in 'saddleCmbBox' combo box
            uISaddleCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UISaddleCmbBoxComboBoxSelectedItem;

            // Select 'Bullhorns Bars' in 'handlebarsCmbBox' combo box
            uIHandlebarsCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UIHandlebarsCmbBoxComboBoxSelectedItem;

            // Select 'Mountain' in 'wheelsCmbBox' combo box
            uIWheelsCmbBoxComboBox.SelectedItem = this.RecordedMethod7Params.UIWheelsCmbBoxComboBoxSelectedItem;

            // Click 'Continue' button
            Mouse.Click(uIContinueButton, new Point(357, 14));

            // Click 'Finish' button
            Mouse.Click(uIFinishButton, new Point(178, 6));

            // Click 'Enter Customer Details' button
            Mouse.Click(uIEnterCustomerDetailsButton, new Point(156, 4));
        }
        
        #region Properties
        public virtual RecordedMethod1Params RecordedMethod1Params
        {
            get
            {
                if ((this.mRecordedMethod1Params == null))
                {
                    this.mRecordedMethod1Params = new RecordedMethod1Params();
                }
                return this.mRecordedMethod1Params;
            }
        }
        
        public virtual RecordedMethod2Params RecordedMethod2Params
        {
            get
            {
                if ((this.mRecordedMethod2Params == null))
                {
                    this.mRecordedMethod2Params = new RecordedMethod2Params();
                }
                return this.mRecordedMethod2Params;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual RecordedMethod5Params RecordedMethod5Params
        {
            get
            {
                if ((this.mRecordedMethod5Params == null))
                {
                    this.mRecordedMethod5Params = new RecordedMethod5Params();
                }
                return this.mRecordedMethod5Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public virtual AssertMethod5ExpectedValues AssertMethod5ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod5ExpectedValues == null))
                {
                    this.mAssertMethod5ExpectedValues = new AssertMethod5ExpectedValues();
                }
                return this.mAssertMethod5ExpectedValues;
            }
        }
        
        public virtual AssertMethod6ExpectedValues AssertMethod6ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod6ExpectedValues == null))
                {
                    this.mAssertMethod6ExpectedValues = new AssertMethod6ExpectedValues();
                }
                return this.mAssertMethod6ExpectedValues;
            }
        }
        
        public virtual RecordedMethod7Params RecordedMethod7Params
        {
            get
            {
                if ((this.mRecordedMethod7Params == null))
                {
                    this.mRecordedMethod7Params = new RecordedMethod7Params();
                }
                return this.mRecordedMethod7Params;
            }
        }
        
        public UIMainWindowWindow UIMainWindowWindow
        {
            get
            {
                if ((this.mUIMainWindowWindow == null))
                {
                    this.mUIMainWindowWindow = new UIMainWindowWindow();
                }
                return this.mUIMainWindowWindow;
            }
        }
        
        public UIDebugWindow UIDebugWindow
        {
            get
            {
                if ((this.mUIDebugWindow == null))
                {
                    this.mUIDebugWindow = new UIDebugWindow();
                }
                return this.mUIDebugWindow;
            }
        }
        
        public UIFinishedWindowWindow UIFinishedWindowWindow
        {
            get
            {
                if ((this.mUIFinishedWindowWindow == null))
                {
                    this.mUIFinishedWindowWindow = new UIFinishedWindowWindow();
                }
                return this.mUIFinishedWindowWindow;
            }
        }
        
        public UITotalCostWindowWindow UITotalCostWindowWindow
        {
            get
            {
                if ((this.mUITotalCostWindowWindow == null))
                {
                    this.mUITotalCostWindowWindow = new UITotalCostWindowWindow();
                }
                return this.mUITotalCostWindowWindow;
            }
        }
        
        public UIOKWindow UIOKWindow
        {
            get
            {
                if ((this.mUIOKWindow == null))
                {
                    this.mUIOKWindow = new UIOKWindow();
                }
                return this.mUIOKWindow;
            }
        }
        #endregion
        
        #region Fields
        private RecordedMethod1Params mRecordedMethod1Params;
        
        private RecordedMethod2Params mRecordedMethod2Params;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private RecordedMethod5Params mRecordedMethod5Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private AssertMethod5ExpectedValues mAssertMethod5ExpectedValues;
        
        private AssertMethod6ExpectedValues mAssertMethod6ExpectedValues;
        
        private RecordedMethod7Params mRecordedMethod7Params;
        
        private UIMainWindowWindow mUIMainWindowWindow;
        
        private UIDebugWindow mUIDebugWindow;
        
        private UIFinishedWindowWindow mUIFinishedWindowWindow;
        
        private UITotalCostWindowWindow mUITotalCostWindowWindow;
        
        private UIOKWindow mUIOKWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod1Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Highways' in 'wheelsCmbBox' combo box
        /// </summary>
        public string UIWheelsCmbBoxComboBoxSelectedItem = "Highways";
        
        /// <summary>
        /// Select 'Bullhorns Bars' in 'handlebarsCmbBox' combo box
        /// </summary>
        public string UIHandlebarsCmbBoxComboBoxSelectedItem = "Bullhorns Bars";
        
        /// <summary>
        /// Select 'Upright' in 'saddleCmbBox' combo box
        /// </summary>
        public string UISaddleCmbBoxComboBoxSelectedItem = "Upright";
        
        /// <summary>
        /// Select 'Thumb Shifter' in 'gearsCmbBox' combo box
        /// </summary>
        public string UIGearsCmbBoxComboBoxSelectedItem = "Thumb Shifter";
        
        /// <summary>
        /// Select 'V-brakes' in 'brakesCmbBox' combo box
        /// </summary>
        public string UIBrakesCmbBoxComboBoxSelectedItem = "V-brakes";
        
        /// <summary>
        /// Select 'Small' in 'frameSizeCmbBox' combo box
        /// </summary>
        public string UIFrameSizeCmbBoxComboBoxSelectedItem = "Small";
        
        /// <summary>
        /// Select 'Red' in 'frameColourCmbBox' combo box
        /// </summary>
        public string UIFrameColourCmbBoxComboBoxSelectedItem = "Red";
        
        /// <summary>
        /// Select 'Update Warranty' check box
        /// </summary>
        public bool UIUpdateWarrantyCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod2Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Small' in 'frameSizeCmbBox' combo box
        /// </summary>
        public string UIFrameSizeCmbBoxComboBoxSelectedItem = "Small";
        
        /// <summary>
        /// Select 'Red' in 'frameColourCmbBox' combo box
        /// </summary>
        public string UIFrameColourCmbBoxComboBoxSelectedItem = "Red";
        
        /// <summary>
        /// Select 'Thumb Shifter' in 'gearsCmbBox' combo box
        /// </summary>
        public string UIGearsCmbBoxComboBoxSelectedItem = "Thumb Shifter";
        
        /// <summary>
        /// Select 'V-brakes' in 'brakesCmbBox' combo box
        /// </summary>
        public string UIBrakesCmbBoxComboBoxSelectedItem = "V-brakes";
        
        /// <summary>
        /// Select 'Drop Bars' in 'handlebarsCmbBox' combo box
        /// </summary>
        public string UIHandlebarsCmbBoxComboBoxSelectedItem = "Drop Bars";
        
        /// <summary>
        /// Select 'Forward' in 'saddleCmbBox' combo box
        /// </summary>
        public string UISaddleCmbBoxComboBoxSelectedItem = "Forward";
        
        /// <summary>
        /// Select 'Highways' in 'wheelsCmbBox' combo box
        /// </summary>
        public string UIWheelsCmbBoxComboBoxSelectedItem = "Highways";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod1'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '660' label equals '660'
        /// </summary>
        public string UIItem660Text1Name = "660";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod2'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '615' label equals '615'
        /// </summary>
        public string UIItem615Text1Name = "615";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod3'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '1275' label equals '1275'
        /// </summary>
        public string UIItem1275Text1Name = "1275";
        
        /// <summary>
        /// Verify that the 'Name' property of '88 Hours' label equals '88 Hours'
        /// </summary>
        public string UIItem88HoursText1Name = "88 Hours";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod5Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Small' in 'frameSizeCmbBox' combo box
        /// </summary>
        public string UIFrameSizeCmbBoxComboBoxSelectedItem = "Small";
        
        /// <summary>
        /// Select 'Big' in 'frameSizeCmbBox' combo box
        /// </summary>
        public string UIFrameSizeCmbBoxComboBoxSelectedItem1 = "Big";
        
        /// <summary>
        /// Select 'Green' in 'frameColourCmbBox' combo box
        /// </summary>
        public string UIFrameColourCmbBoxComboBoxSelectedItem = "Green";
        
        /// <summary>
        /// Select 'Flight Deck Shifter' in 'gearsCmbBox' combo box
        /// </summary>
        public string UIGearsCmbBoxComboBoxSelectedItem = "Flight Deck Shifter";
        
        /// <summary>
        /// Select 'Caliper Brakes' in 'brakesCmbBox' combo box
        /// </summary>
        public string UIBrakesCmbBoxComboBoxSelectedItem = "Caliper Brakes";
        
        /// <summary>
        /// Select 'Bullhorns Bars' in 'handlebarsCmbBox' combo box
        /// </summary>
        public string UIHandlebarsCmbBoxComboBoxSelectedItem = "Bullhorns Bars";
        
        /// <summary>
        /// Select 'Upright' in 'saddleCmbBox' combo box
        /// </summary>
        public string UISaddleCmbBoxComboBoxSelectedItem = "Upright";
        
        /// <summary>
        /// Select 'Highways' in 'wheelsCmbBox' combo box
        /// </summary>
        public string UIWheelsCmbBoxComboBoxSelectedItem = "Highways";
        
        /// <summary>
        /// Select 'Update Warranty' check box
        /// </summary>
        public bool UIUpdateWarrantyCheckBoxChecked = true;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod4'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '750' label equals '750'
        /// </summary>
        public string UIItem750Text1Name = "750";
        
        /// <summary>
        /// Verify that the 'Name' property of '750' label equals '750'
        /// </summary>
        public string UIItem750Text1Name1 = "750";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod5'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod5ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '750' label equals '750'
        /// </summary>
        public string UIItem750Text1Name = "750";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AssertMethod6'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class AssertMethod6ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Name' property of '32 Hours' label equals '32 Hours'
        /// </summary>
        public string UIItem32HoursText1Name = "32 Hours";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedMethod7'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class RecordedMethod7Params
    {
        
        #region Fields
        /// <summary>
        /// Select 'Small' in 'frameSizeCmbBox' combo box
        /// </summary>
        public string UIFrameSizeCmbBoxComboBoxSelectedItem = "Small";
        
        /// <summary>
        /// Select 'Medium' in 'frameSizeCmbBox' combo box
        /// </summary>
        public string UIFrameSizeCmbBoxComboBoxSelectedItem1 = "Medium";
        
        /// <summary>
        /// Select 'Black' in 'frameColourCmbBox' combo box
        /// </summary>
        public string UIFrameColourCmbBoxComboBoxSelectedItem = "Black";
        
        /// <summary>
        /// Select 'Thumb Shifter' in 'gearsCmbBox' combo box
        /// </summary>
        public string UIGearsCmbBoxComboBoxSelectedItem = "Thumb Shifter";
        
        /// <summary>
        /// Select 'V-brakes' in 'brakesCmbBox' combo box
        /// </summary>
        public string UIBrakesCmbBoxComboBoxSelectedItem = "V-brakes";
        
        /// <summary>
        /// Select 'Forward' in 'saddleCmbBox' combo box
        /// </summary>
        public string UISaddleCmbBoxComboBoxSelectedItem = "Forward";
        
        /// <summary>
        /// Select 'Bullhorns Bars' in 'handlebarsCmbBox' combo box
        /// </summary>
        public string UIHandlebarsCmbBoxComboBoxSelectedItem = "Bullhorns Bars";
        
        /// <summary>
        /// Select 'Mountain' in 'wheelsCmbBox' combo box
        /// </summary>
        public string UIWheelsCmbBoxComboBoxSelectedItem = "Mountain";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIMainWindowWindow : WpfWindow
    {
        
        public UIMainWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "MainWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("MainWindow");
            #endregion
        }
        
        #region Properties
        public WpfComboBox UIWheelsCmbBoxComboBox
        {
            get
            {
                if ((this.mUIWheelsCmbBoxComboBox == null))
                {
                    this.mUIWheelsCmbBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIWheelsCmbBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "wheelsCmbBox";
                    this.mUIWheelsCmbBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIWheelsCmbBoxComboBox;
            }
        }
        
        public WpfComboBox UIHandlebarsCmbBoxComboBox
        {
            get
            {
                if ((this.mUIHandlebarsCmbBoxComboBox == null))
                {
                    this.mUIHandlebarsCmbBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIHandlebarsCmbBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "handlebarsCmbBox";
                    this.mUIHandlebarsCmbBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIHandlebarsCmbBoxComboBox;
            }
        }
        
        public WpfComboBox UISaddleCmbBoxComboBox
        {
            get
            {
                if ((this.mUISaddleCmbBoxComboBox == null))
                {
                    this.mUISaddleCmbBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUISaddleCmbBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "saddleCmbBox";
                    this.mUISaddleCmbBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUISaddleCmbBoxComboBox;
            }
        }
        
        public WpfComboBox UIGearsCmbBoxComboBox
        {
            get
            {
                if ((this.mUIGearsCmbBoxComboBox == null))
                {
                    this.mUIGearsCmbBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIGearsCmbBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "gearsCmbBox";
                    this.mUIGearsCmbBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIGearsCmbBoxComboBox;
            }
        }
        
        public WpfComboBox UIBrakesCmbBoxComboBox
        {
            get
            {
                if ((this.mUIBrakesCmbBoxComboBox == null))
                {
                    this.mUIBrakesCmbBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIBrakesCmbBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "brakesCmbBox";
                    this.mUIBrakesCmbBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIBrakesCmbBoxComboBox;
            }
        }
        
        public WpfComboBox UIFrameSizeCmbBoxComboBox
        {
            get
            {
                if ((this.mUIFrameSizeCmbBoxComboBox == null))
                {
                    this.mUIFrameSizeCmbBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIFrameSizeCmbBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "frameSizeCmbBox";
                    this.mUIFrameSizeCmbBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIFrameSizeCmbBoxComboBox;
            }
        }
        
        public WpfComboBox UIFrameColourCmbBoxComboBox
        {
            get
            {
                if ((this.mUIFrameColourCmbBoxComboBox == null))
                {
                    this.mUIFrameColourCmbBoxComboBox = new WpfComboBox(this);
                    #region Search Criteria
                    this.mUIFrameColourCmbBoxComboBox.SearchProperties[WpfComboBox.PropertyNames.AutomationId] = "frameColourCmbBox";
                    this.mUIFrameColourCmbBoxComboBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIFrameColourCmbBoxComboBox;
            }
        }
        
        public WpfCheckBox UIUpdateWarrantyCheckBox
        {
            get
            {
                if ((this.mUIUpdateWarrantyCheckBox == null))
                {
                    this.mUIUpdateWarrantyCheckBox = new WpfCheckBox(this);
                    #region Search Criteria
                    this.mUIUpdateWarrantyCheckBox.SearchProperties[WpfCheckBox.PropertyNames.AutomationId] = "warrantyCheckBox";
                    this.mUIUpdateWarrantyCheckBox.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIUpdateWarrantyCheckBox;
            }
        }
        
        public WpfButton UIContinueButton
        {
            get
            {
                if ((this.mUIContinueButton == null))
                {
                    this.mUIContinueButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIContinueButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "continueBtn";
                    this.mUIContinueButton.WindowTitles.Add("MainWindow");
                    #endregion
                }
                return this.mUIContinueButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfComboBox mUIWheelsCmbBoxComboBox;
        
        private WpfComboBox mUIHandlebarsCmbBoxComboBox;
        
        private WpfComboBox mUISaddleCmbBoxComboBox;
        
        private WpfComboBox mUIGearsCmbBoxComboBox;
        
        private WpfComboBox mUIBrakesCmbBoxComboBox;
        
        private WpfComboBox mUIFrameSizeCmbBoxComboBox;
        
        private WpfComboBox mUIFrameColourCmbBoxComboBox;
        
        private WpfCheckBox mUIUpdateWarrantyCheckBox;
        
        private WpfButton mUIContinueButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugWindow : WinWindow
    {
        
        public UIDebugWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Debug";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIDebugTitleBar UIDebugTitleBar
        {
            get
            {
                if ((this.mUIDebugTitleBar == null))
                {
                    this.mUIDebugTitleBar = new UIDebugTitleBar(this);
                }
                return this.mUIDebugTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        
        private UIDebugTitleBar mUIDebugTitleBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public UISoftwareEngineeringCListItem UISoftwareEngineeringCListItem
        {
            get
            {
                if ((this.mUISoftwareEngineeringCListItem == null))
                {
                    this.mUISoftwareEngineeringCListItem = new UISoftwareEngineeringCListItem(this);
                }
                return this.mUISoftwareEngineeringCListItem;
            }
        }
        #endregion
        
        #region Fields
        private UISoftwareEngineeringCListItem mUISoftwareEngineeringCListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UISoftwareEngineeringCListItem : WinListItem
    {
        
        public UISoftwareEngineeringCListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "SoftwareEngineeringCoursework";
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinEdit UINameEdit
        {
            get
            {
                if ((this.mUINameEdit == null))
                {
                    this.mUINameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUINameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Name";
                    this.mUINameEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUINameEdit;
            }
        }
        
        public WinEdit UIDatemodifiedEdit
        {
            get
            {
                if ((this.mUIDatemodifiedEdit == null))
                {
                    this.mUIDatemodifiedEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIDatemodifiedEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Date modified";
                    this.mUIDatemodifiedEdit.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIDatemodifiedEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUINameEdit;
        
        private WinEdit mUIDatemodifiedEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIDebugTitleBar : WinTitleBar
    {
        
        public UIDebugTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.WindowTitles.Add("Debug");
            #endregion
        }
        
        #region Properties
        public WinButton UIMinimiseButton
        {
            get
            {
                if ((this.mUIMinimiseButton == null))
                {
                    this.mUIMinimiseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIMinimiseButton.SearchProperties[WinButton.PropertyNames.Name] = "Minimise";
                    this.mUIMinimiseButton.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUIMinimiseButton;
            }
        }
        
        public WinButton UICloseButton
        {
            get
            {
                if ((this.mUICloseButton == null))
                {
                    this.mUICloseButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICloseButton.SearchProperties[WinButton.PropertyNames.Name] = "Close";
                    this.mUICloseButton.WindowTitles.Add("Debug");
                    #endregion
                }
                return this.mUICloseButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIMinimiseButton;
        
        private WinButton mUICloseButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIFinishedWindowWindow : WpfWindow
    {
        
        public UIFinishedWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "FinishedWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("FinishedWindow");
            #endregion
        }
        
        #region Properties
        public UIItem665Text UIItem665Text
        {
            get
            {
                if ((this.mUIItem665Text == null))
                {
                    this.mUIItem665Text = new UIItem665Text(this);
                }
                return this.mUIItem665Text;
            }
        }
        
        public WpfButton UIAddMoreBikesButton
        {
            get
            {
                if ((this.mUIAddMoreBikesButton == null))
                {
                    this.mUIAddMoreBikesButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIAddMoreBikesButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "addMoreBikesBtn";
                    this.mUIAddMoreBikesButton.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIAddMoreBikesButton;
            }
        }
        
        public WpfButton UIFinishButton
        {
            get
            {
                if ((this.mUIFinishButton == null))
                {
                    this.mUIFinishButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIFinishButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "finishBtn";
                    this.mUIFinishButton.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIFinishButton;
            }
        }
        #endregion
        
        #region Fields
        private UIItem665Text mUIItem665Text;
        
        private WpfButton mUIAddMoreBikesButton;
        
        private WpfButton mUIFinishButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem665Text : WpfText
    {
        
        public UIItem665Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "bikeCostLbl";
            this.WindowTitles.Add("FinishedWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIItem665Text1
        {
            get
            {
                if ((this.mUIItem665Text1 == null))
                {
                    this.mUIItem665Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem665Text1.SearchProperties[WpfText.PropertyNames.Name] = "665";
                    this.mUIItem665Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem665Text1.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIItem665Text1;
            }
        }
        
        public WpfText UIItem695Text1
        {
            get
            {
                if ((this.mUIItem695Text1 == null))
                {
                    this.mUIItem695Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem695Text1.SearchProperties[WpfText.PropertyNames.Name] = "695";
                    this.mUIItem695Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem695Text1.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIItem695Text1;
            }
        }
        
        public WpfText UIItem660Text1
        {
            get
            {
                if ((this.mUIItem660Text1 == null))
                {
                    this.mUIItem660Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem660Text1.SearchProperties[WpfText.PropertyNames.Name] = "660";
                    this.mUIItem660Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem660Text1.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIItem660Text1;
            }
        }
        
        public WpfText UIItem470Text1
        {
            get
            {
                if ((this.mUIItem470Text1 == null))
                {
                    this.mUIItem470Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem470Text1.SearchProperties[WpfText.PropertyNames.Name] = "470";
                    this.mUIItem470Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem470Text1.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIItem470Text1;
            }
        }
        
        public WpfText UIItem600Text1
        {
            get
            {
                if ((this.mUIItem600Text1 == null))
                {
                    this.mUIItem600Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem600Text1.SearchProperties[WpfText.PropertyNames.Name] = "600";
                    this.mUIItem600Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem600Text1.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIItem600Text1;
            }
        }
        
        public WpfText UIItem615Text1
        {
            get
            {
                if ((this.mUIItem615Text1 == null))
                {
                    this.mUIItem615Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem615Text1.SearchProperties[WpfText.PropertyNames.Name] = "615";
                    this.mUIItem615Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem615Text1.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIItem615Text1;
            }
        }
        
        public WpfText UIItem750Text1
        {
            get
            {
                if ((this.mUIItem750Text1 == null))
                {
                    this.mUIItem750Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem750Text1.SearchProperties[WpfText.PropertyNames.Name] = "750";
                    this.mUIItem750Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem750Text1.WindowTitles.Add("FinishedWindow");
                    #endregion
                }
                return this.mUIItem750Text1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItem665Text1;
        
        private WpfText mUIItem695Text1;
        
        private WpfText mUIItem660Text1;
        
        private WpfText mUIItem470Text1;
        
        private WpfText mUIItem600Text1;
        
        private WpfText mUIItem615Text1;
        
        private WpfText mUIItem750Text1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UITotalCostWindowWindow : WpfWindow
    {
        
        public UITotalCostWindowWindow()
        {
            #region Search Criteria
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "TotalCostWindow";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("TotalCostWindow");
            #endregion
        }
        
        #region Properties
        public UIItem1360Text UIItem1360Text
        {
            get
            {
                if ((this.mUIItem1360Text == null))
                {
                    this.mUIItem1360Text = new UIItem1360Text(this);
                }
                return this.mUIItem1360Text;
            }
        }
        
        public UIItem88HoursText UIItem88HoursText
        {
            get
            {
                if ((this.mUIItem88HoursText == null))
                {
                    this.mUIItem88HoursText = new UIItem88HoursText(this);
                }
                return this.mUIItem88HoursText;
            }
        }
        
        public WpfButton UIEnterCustomerDetailsButton
        {
            get
            {
                if ((this.mUIEnterCustomerDetailsButton == null))
                {
                    this.mUIEnterCustomerDetailsButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUIEnterCustomerDetailsButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "customerDetailsBtn";
                    this.mUIEnterCustomerDetailsButton.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUIEnterCustomerDetailsButton;
            }
        }
        
        public WpfButton UICancelOrderButton
        {
            get
            {
                if ((this.mUICancelOrderButton == null))
                {
                    this.mUICancelOrderButton = new WpfButton(this);
                    #region Search Criteria
                    this.mUICancelOrderButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "cancelOrderBtn";
                    this.mUICancelOrderButton.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUICancelOrderButton;
            }
        }
        #endregion
        
        #region Fields
        private UIItem1360Text mUIItem1360Text;
        
        private UIItem88HoursText mUIItem88HoursText;
        
        private WpfButton mUIEnterCustomerDetailsButton;
        
        private WpfButton mUICancelOrderButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem1360Text : WpfText
    {
        
        public UIItem1360Text(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "totalCostLbl";
            this.WindowTitles.Add("TotalCostWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIItem1360Text1
        {
            get
            {
                if ((this.mUIItem1360Text1 == null))
                {
                    this.mUIItem1360Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem1360Text1.SearchProperties[WpfText.PropertyNames.Name] = "1360";
                    this.mUIItem1360Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem1360Text1.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUIItem1360Text1;
            }
        }
        
        public WpfText UIItem1130Text1
        {
            get
            {
                if ((this.mUIItem1130Text1 == null))
                {
                    this.mUIItem1130Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem1130Text1.SearchProperties[WpfText.PropertyNames.Name] = "1130";
                    this.mUIItem1130Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem1130Text1.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUIItem1130Text1;
            }
        }
        
        public WpfText UIItem1275Text1
        {
            get
            {
                if ((this.mUIItem1275Text1 == null))
                {
                    this.mUIItem1275Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem1275Text1.SearchProperties[WpfText.PropertyNames.Name] = "1275";
                    this.mUIItem1275Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem1275Text1.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUIItem1275Text1;
            }
        }
        
        public WpfText UIItem750Text1
        {
            get
            {
                if ((this.mUIItem750Text1 == null))
                {
                    this.mUIItem750Text1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem750Text1.SearchProperties[WpfText.PropertyNames.Name] = "750";
                    this.mUIItem750Text1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem750Text1.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUIItem750Text1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItem1360Text1;
        
        private WpfText mUIItem1130Text1;
        
        private WpfText mUIItem1275Text1;
        
        private WpfText mUIItem750Text1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIItem88HoursText : WpfText
    {
        
        public UIItem88HoursText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "completionTimeLbl";
            this.WindowTitles.Add("TotalCostWindow");
            #endregion
        }
        
        #region Properties
        public WpfText UIItem88HoursText1
        {
            get
            {
                if ((this.mUIItem88HoursText1 == null))
                {
                    this.mUIItem88HoursText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem88HoursText1.SearchProperties[WpfText.PropertyNames.Name] = "88 Hours";
                    this.mUIItem88HoursText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem88HoursText1.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUIItem88HoursText1;
            }
        }
        
        public WpfText UIItem32HoursText1
        {
            get
            {
                if ((this.mUIItem32HoursText1 == null))
                {
                    this.mUIItem32HoursText1 = new WpfText(this);
                    #region Search Criteria
                    this.mUIItem32HoursText1.SearchProperties[WpfText.PropertyNames.Name] = "32 Hours";
                    this.mUIItem32HoursText1.SearchConfigurations.Add(SearchConfiguration.DisambiguateChild);
                    this.mUIItem32HoursText1.WindowTitles.Add("TotalCostWindow");
                    #endregion
                }
                return this.mUIItem32HoursText1;
            }
        }
        #endregion
        
        #region Fields
        private WpfText mUIItem88HoursText1;
        
        private WpfText mUIItem32HoursText1;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "15.0.26208.0")]
    public class UIOKWindow : WinWindow
    {
        
        public UIOKWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "OK";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Button";
            this.WindowTitles.Add("OK");
            #endregion
        }
        
        #region Properties
        public WinButton UIOKButton
        {
            get
            {
                if ((this.mUIOKButton == null))
                {
                    this.mUIOKButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIOKButton.SearchProperties[WinButton.PropertyNames.Name] = "OK";
                    this.mUIOKButton.WindowTitles.Add("OK");
                    #endregion
                }
                return this.mUIOKButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIOKButton;
        #endregion
    }
}
